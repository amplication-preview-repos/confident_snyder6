/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Report as PrismaReport } from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class ReportServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.ReportCountArgs, "select">): Promise<number> {
    return this.prisma.report.count(args);
  }

  async reports(args: Prisma.ReportFindManyArgs): Promise<PrismaReport[]> {
    return this.prisma.report.findMany(args);
  }
  async report(
    args: Prisma.ReportFindUniqueArgs
  ): Promise<PrismaReport | null> {
    return this.prisma.report.findUnique(args);
  }
  async createReport(args: Prisma.ReportCreateArgs): Promise<PrismaReport> {
    return this.prisma.report.create(args);
  }
  async updateReport(args: Prisma.ReportUpdateArgs): Promise<PrismaReport> {
    return this.prisma.report.update(args);
  }
  async deleteReport(args: Prisma.ReportDeleteArgs): Promise<PrismaReport> {
    return this.prisma.report.delete(args);
  }

  async uploadLinkDoRaportu<T extends Prisma.ReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaReport> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "linkDoRaportu";
    const linkDoRaportu = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.report.update({
      where: args.where,

      data: {
        linkDoRaportu: linkDoRaportu as InputJsonValue,
      },
    });
  }

  async downloadLinkDoRaportu<T extends Prisma.ReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportFindUniqueArgs>
  ): Promise<FileDownload> {
    const { linkDoRaportu } = await this.prisma.report.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      linkDoRaportu as unknown as LocalStorageFile
    );
  }

  async deleteLinkDoRaportu<T extends Prisma.ReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportFindUniqueArgs>
  ): Promise<PrismaReport> {
    const { linkDoRaportu } = await this.prisma.report.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      linkDoRaportu as unknown as LocalStorageFile
    );

    return await this.prisma.report.update({
      where: args.where,

      data: {
        linkDoRaportu: Prisma.DbNull,
      },
    });
  }
}
